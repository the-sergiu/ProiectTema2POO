- Fiecare user va fi incarcat pe rand dintr-un fisier de tip JSON.
- Odata ce au fost incarcati toti utilizatori acestia vor putea realiza diferite actiuni
	*Ei vor putea sa vizualize continutul cosului de cumparaturi = GETCOS
	*Sa vizualizeze produse oarecare de pe site = GET(ID)
	*Sa adauge la cosul lor de cumparaturi = ADD(ID)
	*Sau sa stearga din cosul de cumparaturi = DEL(ID)
	*Sa comande ceea ce se afla in cousul de cumparaturi = BUY **cee ce va face ca cantitatile de produse sa se modifice**;
	
	Posibile : SEARCH? 
Deci toate actiunile posibile vor fi [GETCOS, GET, ADD, DEL, BUY]
Acestea vor fi mediate de niste metode din clasa Server (cel mai probabil)

Modificarile facute de acestea se vor reflecta in state-ul in care se vor gasi
colectiile Cos de Cumparaturi si LRU.

Definitiile metodelor
	*List<Produse*> GetCos(); Nu modifica nici LRU si nici Cosul
	
	*List<Prouse*> Get(vector<int>); va primi o lista de ID-uri cu diferite tipuri de produse
		functia va updata LRU si va returna in schimb o lista neomogena cu toate produsele respective
	
	*void Add(int); va lua ID-ul unui produs si il va adauga in cos. Va updata LRU de asemenea

	*Void Del(int); va lua ID-ul unui produs si il va sterge din cos. Va updata LRU


Toate operatiile vor fi preluate din fisier

Exemplu de functionare

Avem 	PROD  = [1, 2, 3, 5, 6, 7,8]
	LRU   = [_,_,_]
	USERS = { U1[_,_], U2[_,_], U3[_,_]} **Fiecare user reprezentat cu propriu cos de cumparaturi

OP  = operatii citite din fiser
REZ = Modificarile produse de operatie 

OP:  U1 -> Get(3,4)	
REZ: LRU = [3,4,_] / Trimite[3, 4] (trimite o lista neomogena in care se afla produsele 3 si 4)

OP:  U2 -> Get(4) 
REZ: LRU = [4, 3,_] / Trimite[3]

OP : U2-> Add(1, 5) 
REZ: U2[1, 5] / LRU[1, 5, 4] / Nu trimite Nimic

OP : U2 -> GetCos()
Rez: Trimite[1, 5]

OP : U2 -> Del(5)
REZ: U2[_, 5] Nu trimite Nimic




